import argparse
import math
import random
from pathlib import Path

import numpy as np
import sqlalchemy as sa
from scipy.misc import imresize
from skimage.io import imread, imsave
from tqdm import tqdm

from terial.database import session_scope
from terial.models import ExemplarShapePair

parser = argparse.ArgumentParser()
parser.add_argument(dest='in_dir', type=Path)
parser.add_argument(dest='out_path', type=Path)
parser.add_argument('--resolution', type=str, required=True)
parser.add_argument('--filter-good', action='store_true')
parser.add_argument('--max', type=int, default=None)
parser.add_argument('--page-size', type=str)
args = parser.parse_args()

# good_ids = {14089, 107242, 198278, 44876, 39705, 140474, 109355, 159195, 11054,
#             10397, 27564, 44276, 43856, 184152, 85938, 58334, 77162, 11826,
#             12570, 202279, 53488, 8898, 43080, 51247, 51246, 71392, 202738,
#             35835, 239097, 86405, 97961, 7753, 36569, 48461, 105052, 239254,
#             43320, 29252, 106777, 141771, 140763, 230719, 304794, 2726, 44252,
#             196052, 42976, 162776, 36262, 136357, 199213, 60360, 86167, 82348,
#             48300, 211314, 3367, 240615, 55985, 3344, 8956, 8982, 242077, 97010,
#             12465, 118466, 145328, 29526, 49123, 192963, 10503, 135701, 135631,
#             243456, 46696, 212171, 292269, 288545, 27668, 286192, 85280, 141907,
#             275492, 36442, 124188, 9314, 36945, 40615, 16839, 64345, 39971,
#             98600, 9546, 28911, 15513, 44564, 202736, 90313, 23213, 90338, 9303,
#             137470, 96966, 302116, 22232, 49344, 123696, 16455, 81453, 184804,
#             2028, 180957, 65020, 22508, 31978, 162153, 10577, 145466, 285804,
#             311536, 12723, 104431, 109077, 26004, 109120, 15851, 15909, 193406,
#             109697, 238588, 88630, 28488, 231432, 28743, 40460, 20738, 261459,
#             28232, 288809, 33607, 134933, 257687, 32944, 154578, 102854, 242075,
#             25396, 507, 3173, 14289, 104158, 114720, 43812, 194164, 39510,
#             143277, 9367, 20707, 19908, 117871, 125740, 137056, 77474, 270720,
#             42101, 36802, 42097, 16426, 9276, 187485, 56884, 25642, 118155,
#             162977, 82002, 38519, 99162, 191695, 11982, 44835, 15566, 19617,
#             52299, 10831, 10811, 10753, 10807, 11455, 11446, 10760, 10800,
#             10828, 34075, 207139, 49743, 61807, 66947, 216356, 138211, 281987,
#             113899, 44548, 102265, 228999, 116712, 29326, 52242, 35487, 4355,
#             145680, 31233, 289543, 6451, 51343, 51341, 178912, 11696, 40912,
#             264491, 90144, 298432, 20054, 91416, 3175, 48625, 3567, 53049,
#             88511, 50324, 50328, 122763, 23657, 2275, 173795, 62868, 155708,
#             12514, 51853, 146868, 263099, 137701, 21144, 129256, 31267, 123434,
#             229344, 290638, 23828, 24662, 201577, 31865, 194163, 190582, 34332,
#             224865, 43844, 205926, 267179, 221163, 233996, 221205, 36448,
#             227098, 60938, 44117, 67281, 177495, 124071, 268310, 201383, 199830,
#             112236, 140431, 9207, 9050, 47655, 64806, 30975, 64143, 267979,
#             47540, 63812, 98166, 64631, 45205, 195777, 35578, 75586, 19997,
#             39203, 201687, 134372, 20667, 48480, 35273, 47619, 23246, 9089,
#             257196, 13421, 13380, 13372, 19739, 229717, 3120, 29329, 26507,
#             308422, 27331, 42411, 263447, 184154, 231433, 105355, 29108, 33048,
#             292799, 249909, 203748, 138742, 162644, 25431, 193357, 42174, 22611,
#             22463, 26200, 228065, 216309, 235383, 109092, 278784, 40219, 23761,
#             34285, 19969, 20110, 190329, 110533, 32681, 98011, 23678, 46863,
#             9822, 9839, 9436, 200154, 109081, 35950, 33965, 192086, 153913,
#             124067, 241990, 147056, 65422, 55768, 1969, 128558, 184807, 9606,
#             41116, 218976, 275686, 1227, 60403, 158938, 289128, 290327, 263292,
#             51485, 9564, 103723, 257098, 170863, 147777, 174877, 307202, 65528,
#             237465, 203864, 6658, 7509, 6581, 2124, 104722, 266753, 234689,
#             221974, 38032, 17535, 63571, 272688, 19396, 45034, 24056, 156857,
#             270242, 221943, 127487, 134244, 29021, 53507, 52397, 133632, 22814,
#             246991, 166910, 21857, 158259, 17863, 17334, 34704, 127511, 264349,
#             127542, 210829, 261688, 420, 182030, 662, 11744, 11060, 25542,
#             11399, 17925, 113914, 127578, 38700, 68679, 191232, 156051, 45541,
#             287290, 3146, 148601, 186361, 298412, 142723, 80734, 284304, 157799,
#             216101, 11652, 3206, 3325, 3332, 3395, 3402, 3199, 3248, 14253,
#             125201, 11369, 11390, 38799, 52949, 25586, 116198, 57725, 53020,
#             181884, 24458, 55113, 121897, 266766, 229332, 237622, 210812, 20167,
#             23876, 135039, 33087, 55790, 56303, 13180, 252209, 184151, 42701,
#             7837, 117613, 192889, 212279, 20252, 35357, 30108, 25159, 227,
#             249113, 47371, 37073, 829, 121870, 151159, 297072, 124002, 80549,
#             41235, 266813, 142505}

good_ids = {140474, 159195, 11054, 10397, 43856, 184152, 85938, 58334, 12570,
            8898, 35835, 86405, 36569, 43320, 106777, 141771, 304794, 196052,
            42976, 162776, 211314, 240615, 8982, 242077, 135701, 135631, 288545,
            286192, 85280, 141907, 275492, 36442, 9314, 36945, 44564, 22232,
            180957, 162153, 26004, 15851, 40460, 20738, 33607, 104158, 114720,
            39510, 143277, 36802, 187485, 15566, 10831, 10811, 10753, 11455,
            11446, 52242, 264491, 90144, 3175, 173795, 268310, 199830, 19997,
            13421, 13380, 13372, 231433, 105355, 292799, 26200, 40219, 200154,
            128558, 41116, 218976, 275686, 45034, 127542, 68679, 3332, 3395}


def main():
    with session_scope() as sess:
        pairs = sess.query(ExemplarShapePair).filter(sa.and_(
            ExemplarShapePair.distance <= 8,
            ExemplarShapePair.rank <= 3)).all()

        good_pair_ids = set(p.id for p in pairs)

    image_paths = list(args.in_dir.glob('*.jpg'))
    random.seed(12345)
    random.shuffle(image_paths)
    image_pair_ids = [int(p.stem.split('.')[0]) for p in image_paths]

    if args.filter_good:
        image_paths = [path for path, pair_id in
                       zip(image_paths, image_pair_ids)
                       if pair_id in good_ids]
    print(len(image_paths))

    if args.max:
        image_paths = image_paths[:args.max]

    res_w, res_h = tuple(int(i) for i in args.resolution.split(','))

    if args.page_size:
        cols, rows = tuple(int(i) for i in args.page_size.split(','))
        per_page = rows * cols
        num_pages = len(image_paths) // per_page
        print(f" * per_page = {per_page}")
        print(f" * num_pages = {num_pages}")
        print(f" * res_w = {res_w}, res_h = {res_h}")
        for page in range(num_pages):
            print(f" * Processing page {page}")
            page_paths = image_paths[page * per_page:(page + 1) * per_page]
            out_image = np.zeros((res_h * (rows + 1), res_w * (cols + 1), 3),
                                 dtype=np.uint8)
            for i, path in enumerate(tqdm(page_paths)):
                row = i // cols
                col = i % cols
                image = imresize(imread(path), (res_w, res_h))
                out_image[row * res_h:(row + 1) * res_h,
                col * res_w:(col + 1) * res_w] = image[:, :, :3]
            out_path = args.out_path.parent / f"{args.out_path.stem!s}.{page:03d}.jpg"
            print(f" * Saving to {out_path!s}")
            imsave(out_path, out_image)
    else:
        length = int(math.sqrt(len(image_paths)))
        if length % 2 == 0:
            length = length - 1
        out_image = np.zeros((res_h * length, res_w * length, 3),
                             dtype=np.uint8)

        for i, path in enumerate(tqdm(image_paths[:length ** 2])):
            row = i // length
            col = i % length

            image = imresize(imread(str(path)), (res_w, res_h))
            out_image[row * res_h:row * res_h + res_h,
            col * res_w:col * res_w + res_w] = image[:, :, :3]

        imsave(args.out_path, out_image)


if __name__ == '__main__':
    main()
